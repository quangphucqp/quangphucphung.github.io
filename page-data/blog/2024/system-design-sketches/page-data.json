{"componentChunkName":"component---src-templates-post-tsx-content-file-path-src-posts-2024-system-design-sketches-index-mdx","path":"/blog/2024/system-design-sketches/","result":{"data":{"mdx":{"id":"285a1016-0041-5f82-871a-74d0646e7d44","body":"\r\nSystem design sketches for popular system design interview questions:\r\n\r\n- [Design Social Network](#social-network) (like Facebook, Twitter, Instagram, Reddit)\r\n- [Design Ride-sharing App](#ride-sharing-app) (like Uber, Lyft)\r\n- [Design Messenger](#messenger) (like WhatsApp, Telegram, Viber)\r\n- [Design Video Streaming App](#video-streaming-app) (like YouTube, Netflix)\r\n- [Design File Hosting App](#file-hosting-app) (like GoogleDrive, Dropbox)\r\n- [Design Web Crawler](#web-crawler)\r\n\r\n> See the sketches in full resolution at [okso.app/showcase/system-design](https://okso.app/showcase/system-design)\r\n\r\n<iframe\r\n  width=\"100%\"\r\n  height=\"485\"\r\n  src=\"https://www.youtube.com/embed/d0_XAN29g7U?si=T5Bbb6rJ06Ku20_v\"\r\n  title=\"YouTube video player\"\r\n  frameborder=\"0\"\r\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n  referrerpolicy=\"strict-origin-when-cross-origin\"\r\n  allowfullscreen>\r\n</iframe>\r\n\r\n## Social Network\r\n\r\n```\r\nFunctional requirements:\r\n------------------------\r\n- Follow people\r\n- See followers and falowees\r\n- Create posts (text, image, url, @mentions)\r\n- Like posts\r\n- View user feed\r\n- View home feed\r\n\r\n\r\nNon-functional requirements:\r\n----------------------------\r\n- Add post <500ms\r\n- View feed <500ms\r\n- Post in feed with ~2 mins delay is ok\r\n- Billions of users\r\n- Unlimited followers\r\n\r\n\r\nCore entities:\r\n--------------\r\n- User\r\n- Follow\r\n- Post\r\n\r\n\r\nAPI (RPC-like):\r\n---------------\r\n- POST /getFollowers     {userId}\r\n- POST /getFollowees     {userId}\r\n- POST /followUser       {userId}\r\n\r\n- POST /createPost       {text}\r\n- POST /likePost         {postId}\r\n\r\n- POST /getHomeFeed      {userId}\r\n- POST /getUserFeed      {userId}\r\n```\r\n\r\nDesign sketch:\r\n\r\n![Social network](./assets/demo-31-system-design-sketches-social-network.png)\r\n\r\nDeep dives:\r\n- [Social network: System design sketch](https://okso.app/showcase/system-design/page/d0af682e-08cb-4b6f-3e12-1f5c1d3f8aec) (okso.app)\r\n- [Facebook News Feed](https://www.hellointerview.com/learn/system-design/answer-keys/fb-news-feed) (hellointerview)\r\n- [Instagram + Twitter + Facebook + Reddit](https://www.youtube.com/watch?v=S2y9_XYOZsg) (Jordan has no life)\r\n\r\n## Ride-Sharing App\r\n\r\n```\r\nFunctional requirements:\r\n------------------------\r\n- Rider gets estimated fare (by Start and Destination locations)\r\n- Rider requests a ride based on the estimate\r\n- Driver accepts/denies request + Navigates to pickup/drop-off\r\n\r\n\r\nNon-functional requirements:\r\n----------------------------\r\n- Low latency for rider-driver matching (<1min)\r\n- Consistency of rider-driver 1:1 matching\r\n  - For one ride, only one driver will get request at a time\r\n- Highly available outside matching\r\n- Handle high-throughput (peak hours, popular events)\r\n\r\n\r\nCore entities:\r\n--------------\r\n- Rider\r\n- Driver\r\n- Ride\r\n- Location\r\n\r\n\r\nAPI:\r\n---------------\r\n- POST /getEstimate({from, to}) --> Partial<Ride>\r\n\r\n- POST /requestRide({ride_id}) --> Ride\r\n\r\n- POST /getRide({ride_id})\r\n\r\n  - gets the latest ride entity to display the\r\n    ride details for both rider and driver apps\r\n\r\n- POST /updateLocation({lat, lon})\r\n\r\n  - both driver and rider can update their locations\r\n    which may be used to display their on the map\r\n  - drivers might update their location i.e. once\r\n    per 5 seconds (it is needed for matching)\r\n  - however this can be optimised on the client side,\r\n    where we might say that location update is\r\n    proportional to driver speed: for still drivers\r\n    we update location rarely, for moving - more often\r\n\r\n- POST /acceptRide({ride_id, accept})\r\n  - ride is being accepted by the driver\r\n\r\n- POST /updateRide({ride_id, status})\r\n```\r\n\r\nDesign sketch:\r\n\r\n![Ride-sharing app](./assets/demo-31-system-design-sketches-ride-sharing.png)\r\n\r\nDeep dives:\r\n- [Ride-sharing platform: System design sketch](https://okso.app/showcase/system-design/page/3033cade-7fcb-420a-0937-64245b7a1dc4) (okso.app)\r\n- [Design Uber](https://www.hellointerview.com/learn/system-design/answer-keys/uber) (hellointerview)\r\n\r\n## Messenger\r\n\r\n```\r\nFunctional requirements:\r\n------------------------\r\n- Group chat (<100 users)\r\n- Send message\r\n- Receive message\r\n- Persist messages (user messages are\r\n  available on multiple devices)\r\n\r\n\r\nNon-functional requirements:\r\n----------------------------\r\n- Low latency for message delivery (<500ms)\r\n- No lost messages (delivery guarantee)\r\n\r\n\r\nCore entities:\r\n--------------\r\n- Users\r\n- Groups\r\n- Messages\r\n\r\n\r\nAPI:\r\n---------------\r\n- createGroup({users: [], name: ''}) -> {group_id}\r\n- joinGroup({group_id}) -> \"ACK\"/ \"ERR\"\r\n- quitGroup({group_id}) -> \"ACK\"/ \"ERR\"\r\n- getMyGroups() -> {groups: []}\r\n- getGroupMessages({group_id, max_message_id, min_message_id}) -> {messages: []}\r\n\r\nWebSocket:\r\n- connect()\r\n- sendMessage({group_id, message, media: []}) -> \"ACK\"/ \"ERR\"\r\n- onGroupUpdated({group_id, participants}) -> \"ACK\"\r\n- onMessage({chat_id, user_id, message, attachments}) -> \"ACK\"\r\n```\r\n\r\nDesign sketch:\r\n\r\n![Messenger](./assets/demo-31-system-design-sketches-messenger.png)\r\n\r\nDeep dives:\r\n- [Messenger: System design sketch](https://okso.app/showcase/system-design/page/4c662fd7-37d4-4864-208c-500f88565839) (okso.app)\r\n- [Facebook Messenger + WhatsApp](https://www.youtube.com/watch?v=-3Ge8EooS3g) (Jordan has no life)\r\n- [Messenger/WhatsApp Design Deep Dive](https://www.youtube.com/watch?v=2Ejdj6QdDD0) (Jordan has no life)\r\n- [Design Whatsapp or Messenger](https://www.hellointerview.com/learn/system-design/answer-keys/whatsapp) (hellointerview)\r\n\r\n## Video Streaming App\r\n\r\n```\r\nFunctional requirements:\r\n------------------------\r\n- Upload video\r\n- Watch video (read-heavy)\r\n- Comment on video\r\n\r\n\r\nNon-functional requirements:\r\n----------------------------\r\n- Reliable uploads (no corrupted/missing videos)\r\n- Read-heavy (read/write ratio ~100:1)\r\n- Availability > Consistency (1-2 min delay between upload and feed is ok)\r\n- Low latency (before video starts playing)\r\n\r\n\r\nCore entities:\r\n--------------\r\n- User\r\n- Video Metadata\r\n- Video Chunks\r\n- Users\r\n- Comments\r\n\r\n\r\nAPI (RPC-like):\r\n---------------\r\n- POST /initiateUpload  {title, description, video, ...}}\r\n  - server responds with S3 private upload URL\r\n  - the actual video upload is going directly from client to S3\r\n\r\n- GET /watch   {video_id}\r\n  - returns video chunks metadata\r\n    - S3 (or CDN) URLs to manifest/playlist files\r\n  - video streaming happens directly from CDNs\r\n  - download by chunks (buffering, ~1Mb), no need to load all\r\n```\r\n\r\nDesign sketch:\r\n\r\n![Video streaming app](./assets/demo-31-system-design-sketches-video-streaming.png)\r\n\r\nDeep dives:\r\n- [Video streaming platform: System design sketch](https://okso.app/showcase/system-design/page/2ef00091-cdfa-4f07-28cf-d0b6e4207de5) (okso.app)\r\n- [Design Youtube](https://www.youtube.com/watch?v=jPKTo1iGQiE) (NeetCode)\r\n- [Netflix + YouTube](https://www.youtube.com/watch?v=43bB7oSn190) (Jordan has no life)\r\n- [System Design: YouTube](https://www.youtube.com/watch?v=ghYbFgeqXa0) (System Design Fight Club)\r\n\r\n## File Hosting App\r\n\r\n```\r\nFunctional requirements:\r\n------------------------\r\n- Upload file\r\n- Download file\r\n- Sync files across devices\r\n\r\n\r\nNon-functional requirements:\r\n----------------------------\r\n- Availability over consistency\r\n  - Download the older version of\r\n    the file instead of waiting\r\n    for a new version to propagate\r\n    is ok\r\n- low latency for uploads and downloads\r\n- support large files (50Gb)\r\n  - resumable uploads\r\n- high data integrity (accurate syncs)\r\n\r\n\r\nCore entities:\r\n--------------\r\n- File (row bytes)\r\n- File Metadata\r\n- Users\r\n\r\n\r\nAPI:\r\n---------------\r\n- POST /uploadFile({metadata}) --> {upload_id, presigned_url}\r\n\r\n- POST /getFile({file_id}) --> {file{}, metadata}\r\n\r\n- POST /getChanges({since}) --> file_metadata[]\r\n```\r\n\r\nDesign sketch:\r\n\r\n![File hosting app](./assets/demo-31-system-design-sketches-file-hosting.png)\r\n\r\nDeep dives:\r\n- [File hosting app](https://okso.app/showcase/system-design/page/868e746d-0276-40e1-2bcf-b42bceae1b8f) (okso.app)\r\n- [Design Dropbox](https://www.hellointerview.com/learn/system-design/answer-keys/dropbox) (hellointerview)\r\n\r\n## Web Crawler\r\n\r\n```\r\nFunctional requirements:\r\n------------------------\r\n- Scrape the web starting from seed URLs\r\n- Extract and store text data\r\n\r\n\r\nNon-functional requirements:\r\n----------------------------\r\n- Fault-tolerant\r\n- Politeness (respect robots.txt, don't DDoS)\r\n- Scale to 1B pages\r\n- Efficient (crawl within a week)\r\n\r\n\r\nCore entities:\r\n--------------\r\n- URLs\r\n- Text data\r\n- Domain metadata\r\n\r\n\r\nInterface:\r\n----------\r\n- input: seed URLs\r\n- output: text data\r\n\r\n\r\nData Flow:\r\n----------\r\n1. Take seed URLs from a frontier and the IP from DNS\r\n2. Fetch HTML\r\n3. Extract text\r\n4. Store text in the database\r\n5. Extract URLs from the page and add then to the frontier\r\n6. Repeat steps 1-5 until all URLs are crawled\r\n```\r\n\r\nDesign sketch:\r\n\r\n![Web crawler](./assets/demo-31-system-design-sketches-web-crawler.png)\r\n\r\nDeep dives:\r\n- [Web-crawler app: System design sketch](https://okso.app/showcase/system-design/page/7c557108-277c-4a77-12ce-7622b3493420) (okso.app)\r\n- [Design a Web Crawler](https://www.hellointerview.com/learn/system-design/answer-keys/web-crawler) (hellointerview)\r\n- [Design a Web Crawler](https://www.youtube.com/watch?v=MdWvMX4J-Vc) (Jordan has no life)\r\n- [System Design distributed web crawler](https://www.youtube.com/watch?v=BKZxZwUgL3Y) (Tech Dummies Narendra)\r\n","fields":{"slug":"/blog/2024/system-design-sketches/"},"internal":{"contentFilePath":"C:/prj/quangphucphung.github.io/src/posts/2024/system-design-sketches/index.mdx"},"frontmatter":{"title":"System Design Sketches","summary":"System design sketches for popular system design interview questions.","date":"18 July, 2024","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/b62157e6c8612b36932aa96c9afa8070/171b1/02-cover.png","srcSet":"/static/b62157e6c8612b36932aa96c9afa8070/d305d/02-cover.png 750w,\n/static/b62157e6c8612b36932aa96c9afa8070/b7ba1/02-cover.png 1080w,\n/static/b62157e6c8612b36932aa96c9afa8070/b291c/02-cover.png 1366w,\n/static/b62157e6c8612b36932aa96c9afa8070/171b1/02-cover.png 1800w","sizes":"100vw"},"sources":[{"srcSet":"/static/b62157e6c8612b36932aa96c9afa8070/a77c3/02-cover.webp 750w,\n/static/b62157e6c8612b36932aa96c9afa8070/f272c/02-cover.webp 1080w,\n/static/b62157e6c8612b36932aa96c9afa8070/a0d95/02-cover.webp 1366w,\n/static/b62157e6c8612b36932aa96c9afa8070/4791d/02-cover.webp 1800w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5288888888888889}}}}}},"pageContext":{"slug":"/blog/2024/system-design-sketches/","frontmatter":{"title":"System Design Sketches","summary":"System design sketches for popular system design interview questions.","cover":"assets/02-cover.png","date":"2024-07-18T00:00:00.000Z"}}},"staticQueryHashes":["3196427994"],"slicesMap":{}}