{"componentChunkName":"component---src-templates-post-tsx-content-file-path-src-posts-2020-state-of-the-art-shitcode-principles-index-md","path":"/blog/2020/state-of-the-art-shitcode-principles/","result":{"data":{"mdx":{"id":"f2260586-6927-5578-8d63-cebeaf02dc09","body":"\r\n![State-of-the-Art Shitcode Principles](assets/01-cover.png)\r\n\r\nThis a list of state-of-the-art shitcode principles your project should follow.\r\n\r\n> [💩 Full version of the list on GitHub](https://github.com/trekhleb/state-of-the-art-shitcode)\r\n\r\n## Get Your Badge\r\n\r\nIf your repository follows the state-of-the-art shitcode principles you may use the following \"state-of-the-art shitcode\" badge:\r\n\r\n[![State-of-the-art Shitcode](https://img.shields.io/static/v1?label=State-of-the-art&message=Shitcode&color=7B5804)](https://github.com/trekhleb/state-of-the-art-shitcode)\r\n\r\n```\r\n[![State-of-the-art Shitcode](https://img.shields.io/static/v1?label=State-of-the-art&message=Shitcode&color=7B5804)](https://github.com/trekhleb/state-of-the-art-shitcode)\r\n```\r\n\r\n## The Principles\r\n\r\n### 💩 Name variables in a way as if your code was already obfuscated\r\n\r\nFewer keystrokes, more time for you.\r\n\r\n_Good 👍🏻_\r\n\r\n```javascript\r\nlet a = 42;\r\n```\r\n\r\n_Bad 👎🏻_\r\n\r\n```javascript\r\nlet age = 42;\r\n```\r\n\r\n### 💩 Mix variable/functions naming style\r\n\r\nCelebrate the difference.\r\n\r\n_Good 👍🏻_\r\n\r\n```javascript\r\nlet wWidth = 640;\r\nlet w_height = 480;\r\n```\r\n\r\n_Bad 👎🏻_\r\n\r\n```javascript\r\nlet windowWidth = 640;\r\nlet windowHeight = 480;\r\n```\r\n\r\n### 💩 Never write comments\r\n\r\nNo one is going to read your code anyway.\r\n\r\n_Good 👍🏻_\r\n\r\n```javascript\r\nconst cdr = 700;\r\n```\r\n\r\n_Bad 👎🏻_\r\n\r\nMore often comments should contain some 'why' and not some 'what'. If the 'what' is not clear in the code, the code is probably too messy.\r\n\r\n```javascript\r\n// The number of 700ms has been calculated empirically based on UX A/B test results.\r\n// @see: <link to experiment or to related JIRA task or to something that explains number 700 in details>\r\nconst callbackDebounceRate = 700;\r\n```\r\n\r\n### 💩 Always write comments in your native language\r\n\r\nIf you violated the \"No comments\" principle then at least try to write comments in a language that is different from the language you used to write the code. If your native language is English you may violate this principle.\r\n\r\n_Good 👍🏻_\r\n\r\n```javascript\r\n// Закриваємо модальне віконечко при виникненні помилки.\r\ntoggleModal(false);\r\n```\r\n\r\n_Bad 👎🏻_\r\n\r\n```javascript\r\n// Hide modal window on error.\r\ntoggleModal(false);\r\n```\r\n\r\n### 💩 Try to mix formatting style as much as possible\r\n\r\nCelebrate the difference.\r\n\r\n_Good 👍🏻_\r\n\r\n```javascript\r\nlet i = ['tomato', 'onion', 'mushrooms'];\r\nlet d = [ \"ketchup\", \"mayonnaise\" ];\r\n```\r\n\r\n_Bad 👎🏻_\r\n\r\n```javascript\r\nlet ingredients = ['tomato', 'onion', 'mushrooms'];\r\nlet dressings = ['ketchup', 'mayonnaise'];\r\n```\r\n\r\n### 💩 Put as much code as possible into one line\r\n\r\n_Good 👍🏻_\r\n\r\n```javascript\r\ndocument.location.search.replace(/(^\\?)/,'').split('&').reduce(function(o,n){n=n.split('=');o[n[0]]=n[1];return o},{})\r\n```\r\n\r\n_Bad 👎🏻_\r\n\r\n```javascript\r\ndocument.location.search\r\n  .replace(/(^\\?)/, '')\r\n  .split('&')\r\n  .reduce((searchParams, keyValuePair) => {\r\n    keyValuePair = keyValuePair.split('=');\r\n    searchParams[keyValuePair[0]] = keyValuePair[1];\r\n    return searchParams;\r\n  },\r\n  {}\r\n)\r\n```\r\n\r\n### 💩 Fail silently\r\n\r\nWhenever you catch an error it is not necessary for anyone to know about it. No logs, no error modals, chill.\r\n\r\n_Good 👍🏻_\r\n\r\n```javascript\r\ntry {\r\n  // Something unpredictable.\r\n} catch (error) {\r\n  // tss... 🤫\r\n}\r\n```\r\n\r\n_Bad 👎🏻_\r\n\r\n```javascript\r\ntry {\r\n  // Something unpredictable.\r\n} catch (error) {\r\n  setErrorMessage(error.message);\r\n  // and/or\r\n  logError(error);\r\n}\r\n```\r\n\r\n### 💩 Use global variables extensively\r\n\r\nGlobalization principle.\r\n\r\n_Good 👍🏻_\r\n\r\n```javascript\r\nlet x = 5;\r\n\r\nfunction square() {\r\n  x = x ** 2;\r\n}\r\n\r\nsquare(); // Now x is 25.\r\n```\r\n\r\n_Bad 👎🏻_\r\n\r\n```javascript\r\nlet x = 5;\r\n\r\nfunction square(num) {\r\n  return num ** 2;\r\n}\r\n\r\nx = square(x); // Now x is 25.\r\n```\r\n\r\n### 💩 Create variables that you're not going to use.\r\n\r\nJust in case.\r\n\r\n_Good 👍🏻_\r\n\r\n```javascript\r\nfunction sum(a, b, c) {\r\n  const timeout = 1300;\r\n  const result = a + b;\r\n  return a + b;\r\n}\r\n```\r\n\r\n_Bad 👎🏻_\r\n\r\n```javascript\r\nfunction sum(a, b) {\r\n  return a + b;\r\n}\r\n```\r\n\r\n### 💩 Don't specify types and/or don't do type checks if language allows you to do so.\r\n\r\n_Good 👍🏻_\r\n\r\n```javascript\r\nfunction sum(a, b) {\r\n  return a + b;\r\n}\r\n\r\n// Having untyped fun here.\r\nconst guessWhat = sum([], {}); // -> \"[object Object]\"\r\nconst guessWhatAgain = sum({}, []); // -> 0\r\n```\r\n\r\n_Bad 👎🏻_\r\n\r\n```javascript\r\nfunction sum(a: number, b: number): ?number {\r\n  // Covering the case when we don't do transpilation and/or Flow type checks in JS.\r\n  if (typeof a !== 'number' && typeof b !== 'number') {\r\n    return undefined;\r\n  }\r\n  return a + b;\r\n}\r\n\r\n// This one should fail during the transpilation/compilation.\r\nconst guessWhat = sum([], {}); // -> undefined\r\n```\r\n\r\n### 💩 You need to have an unreachable piece of code\r\n\r\nThis is your \"Plan B\".\r\n\r\n_Good 👍🏻_\r\n\r\n```javascript\r\nfunction square(num) {\r\n  if (typeof num === 'undefined') {\r\n    return undefined;\r\n  }\r\n  else {\r\n    return num ** 2;\r\n  }\r\n  return null; // This is my \"Plan B\".\r\n}\r\n```\r\n\r\n_Bad 👎🏻_\r\n\r\n```javascript\r\nfunction square(num) {\r\n  if (typeof num === 'undefined') {\r\n    return undefined;\r\n  }\r\n  return num ** 2;\r\n}\r\n```\r\n\r\n### 💩 Triangle principle\r\n\r\nBe like a bird - nest, nest, nest.\r\n\r\n_Good 👍🏻_\r\n\r\n```javascript\r\nfunction someFunction() {\r\n  if (condition1) {\r\n    if (condition2) {\r\n      asyncFunction(params, (result) => {\r\n        if (result) {\r\n          for (;;) {\r\n            if (condition3) {\r\n            }\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n_Bad 👎🏻_\r\n\r\n```javascript\r\nasync function someFunction() {\r\n  if (!condition1 || !condition2) {\r\n    return;\r\n  }\r\n\r\n  const result = await asyncFunction(params);\r\n  if (!result) {\r\n    return;\r\n  }\r\n\r\n  for (;;) {\r\n    if (condition3) {\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### 💩 Mess with indentations\r\n\r\nAvoid indentations since they make complex code take up more space in the editor. If you're not feeling like avoiding them then just mess with them.\r\n\r\n_Good 👍🏻_\r\n\r\n```javascript\r\nconst fruits = ['apple',\r\n  'orange', 'grape', 'pineapple'];\r\n  const toppings = ['syrup', 'cream',\r\n                    'jam',\r\n                    'chocolate'];\r\nconst desserts = [];\r\nfruits.forEach(fruit => {\r\ntoppings.forEach(topping => {\r\n    desserts.push([\r\nfruit,topping]);\r\n    });})\r\n```\r\n\r\n_Bad 👎🏻_\r\n\r\n```javascript\r\nconst fruits = ['apple', 'orange', 'grape', 'pineapple'];\r\nconst toppings = ['syrup', 'cream', 'jam', 'chocolate'];\r\nconst desserts = [];\r\n\r\nfruits.forEach(fruit => {\r\n  toppings.forEach(topping => {\r\n    desserts.push([fruit, topping]);\r\n  });\r\n})\r\n```\r\n\r\n### 💩 Do not lock your dependencies\r\n\r\nUpdate your dependencies on each new installation in uncontrolled way. Why stick to the past, let's use the cutting edge libraries versions.\r\n\r\n_Good 👍🏻_\r\n\r\n```\r\n$ ls -la\r\n\r\npackage.json\r\n```\r\n\r\n_Bad 👎🏻_\r\n\r\n```\r\n$ ls -la\r\n\r\npackage.json\r\npackage-lock.json\r\n```\r\n\r\n### 💩 Always name your boolean value a `flag`\r\n\r\nLeave the space for your colleagues to think what the boolean value means.\r\n\r\n_Good 👍🏻_\r\n\r\n```javascript\r\nlet flag = true;\r\n```\r\n\r\n_Bad 👎🏻_\r\n\r\n```javascript\r\nlet isDone = false;\r\nlet isEmpty = false;\r\n```\r\n\r\n### 💩 Long-read functions are better than short ones.\r\n\r\nDon't divide a program logic into readable pieces. What if your IDE's search breaks and you will not be able to find the necessary file or function?\r\n\r\n- 10000 lines of code in one file is OK.\r\n- 1000 lines of a function body is OK.\r\n- Dealing with many services (3rd party and internal, also, there are some helpers, database hand-written ORM and jQuery slider) in one `service.js`? It's OK.\r\n\r\n### 💩 Avoid covering your code with tests\r\n\r\nThis is a duplicate and unnecessary amount of work.\r\n\r\n### 💩 As hard as you can try to avoid code linters\r\n\r\nWrite code as you want, especially if there is more than one developer in a team. This is a \"freedom\" principle.\r\n\r\n### 💩 Start your project without a README file.\r\n\r\nKeep it that way for the time being.\r\n\r\n### 💩 You need to have unnecessary code\r\n\r\nDon't delete the code your app doesn't use. At most, comment it.\r\n","fields":{"slug":"/blog/2020/state-of-the-art-shitcode-principles/"},"internal":{"contentFilePath":"C:/prj/quangphucphung.github.io/src/posts/2020/state-of-the-art-shitcode-principles/index.md"},"frontmatter":{"title":"State-of-the-Art Shitcode Principles","summary":"This a list of state-of-the-art shitcode principles your project should follow.","date":"28 January, 2020","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8e808","images":{"fallback":{"src":"/static/95368cd07c6433c2c84d2ce2731af134/8fe9a/01-cover.png","srcSet":"/static/95368cd07c6433c2c84d2ce2731af134/b8c2b/01-cover.png 750w,\n/static/95368cd07c6433c2c84d2ce2731af134/5b74c/01-cover.png 1080w,\n/static/95368cd07c6433c2c84d2ce2731af134/8fe9a/01-cover.png 1280w","sizes":"100vw"},"sources":[{"srcSet":"/static/95368cd07c6433c2c84d2ce2731af134/b41a5/01-cover.webp 750w,\n/static/95368cd07c6433c2c84d2ce2731af134/c3fee/01-cover.webp 1080w,\n/static/95368cd07c6433c2c84d2ce2731af134/bf6d1/01-cover.webp 1280w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5}}}}}},"pageContext":{"slug":"/blog/2020/state-of-the-art-shitcode-principles/","frontmatter":{"title":"State-of-the-Art Shitcode Principles","summary":"This a list of state-of-the-art shitcode principles your project should follow.","cover":"assets/01-cover.png","date":"2020-01-28T00:00:00.000Z"}}},"staticQueryHashes":["3196427994"],"slicesMap":{}}