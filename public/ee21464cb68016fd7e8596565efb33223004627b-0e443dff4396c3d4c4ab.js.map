{"version":3,"file":"ee21464cb68016fd7e8596565efb33223004627b-0e443dff4396c3d4c4ab.js","mappings":"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","sources":["webpack://trekhleb.github.io/./node_modules/@react-icons/all-files/bi/BiErrorCircle.js","webpack://trekhleb.github.io/./node_modules/@react-icons/all-files/bs/BsFillInfoCircleFill.js","webpack://trekhleb.github.io/./node_modules/@react-icons/all-files/fa/FaGithub.js","webpack://trekhleb.github.io/./node_modules/@react-icons/all-files/lib/esm/iconsManifest.js","webpack://trekhleb.github.io/./node_modules/@react-icons/all-files/lib/esm/iconContext.js","webpack://trekhleb.github.io/./node_modules/@react-icons/all-files/lib/esm/iconBase.js","webpack://trekhleb.github.io/./node_modules/camelcase/index.js","webpack://trekhleb.github.io/../src/image-utils.ts","webpack://trekhleb.github.io/../src/components/hooks.ts","webpack://trekhleb.github.io/../src/components/layout-wrapper.tsx","webpack://trekhleb.github.io/../src/components/picture.tsx","webpack://trekhleb.github.io/../src/components/placeholder.tsx","webpack://trekhleb.github.io/../src/components/main-image.tsx","webpack://trekhleb.github.io/../src/components/gatsby-image.server.tsx","webpack://trekhleb.github.io/../src/components/gatsby-image.browser.tsx","webpack://trekhleb.github.io/../src/components/static-image.server.tsx","webpack://trekhleb.github.io/../src/components/static-image.tsx","webpack://trekhleb.github.io/./src/components/shared/Alert.tsx","webpack://trekhleb.github.io/./src/components/shared/Expander.tsx","webpack://trekhleb.github.io/./src/components/shared/FluidImage.tsx","webpack://trekhleb.github.io/./src/components/shared/Row.tsx","webpack://trekhleb.github.io/./src/components/shared/Tag.tsx","webpack://trekhleb.github.io/./src/components/shared/Tags.tsx","webpack://trekhleb.github.io/./src/hooks/useFluidCovers.ts","webpack://trekhleb.github.io/./src/hooks/useFluidCover.ts"],"sourcesContent":["// THIS FILE IS AUTO GENERATED\nvar GenIcon = require('../lib').GenIcon\nmodule.exports.BiErrorCircle = function BiErrorCircle (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 24 24\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M11.953,2C6.465,2,2,6.486,2,12s4.486,10,10,10s10-4.486,10-10S17.493,2,11.953,2z M12,20c-4.411,0-8-3.589-8-8 s3.567-8,7.953-8C16.391,4,20,7.589,20,12S16.411,20,12,20z\"}},{\"tag\":\"path\",\"attr\":{\"d\":\"M11 7H13V14H11zM11 15H13V17H11z\"}}]})(props);\n};\n","// THIS FILE IS AUTO GENERATED\nvar GenIcon = require('../lib').GenIcon\nmodule.exports.BsFillInfoCircleFill = function BsFillInfoCircleFill (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 16 16\",\"fill\":\"currentColor\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"fillRule\":\"evenodd\",\"d\":\"M8 16A8 8 0 108 0a8 8 0 000 16zm.93-9.412l-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM8 5.5a1 1 0 100-2 1 1 0 000 2z\",\"clipRule\":\"evenodd\"}}]})(props);\n};\n","// THIS FILE IS AUTO GENERATED\nvar GenIcon = require('../lib').GenIcon\nmodule.exports.FaGithub = function FaGithub (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 496 512\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\"}}]})(props);\n};\n","export var IconsManifest = [\n  {\n    \"id\": \"fa\",\n    \"name\": \"Font Awesome\",\n    \"projectUrl\": \"https://fontawesome.com/\",\n    \"license\": \"CC BY 4.0 License\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/\"\n  },\n  {\n    \"id\": \"io\",\n    \"name\": \"Ionicons 4\",\n    \"projectUrl\": \"https://ionicons.com/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/ionic-team/ionicons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"io5\",\n    \"name\": \"Ionicons 5\",\n    \"projectUrl\": \"https://ionicons.com/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/ionic-team/ionicons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"md\",\n    \"name\": \"Material Design icons\",\n    \"projectUrl\": \"http://google.github.io/material-design-icons/\",\n    \"license\": \"Apache License Version 2.0\",\n    \"licenseUrl\": \"https://github.com/google/material-design-icons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"ti\",\n    \"name\": \"Typicons\",\n    \"projectUrl\": \"http://s-ings.com/typicons/\",\n    \"license\": \"CC BY-SA 3.0\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by-sa/3.0/\"\n  },\n  {\n    \"id\": \"go\",\n    \"name\": \"Github Octicons icons\",\n    \"projectUrl\": \"https://octicons.github.com/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/primer/octicons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"fi\",\n    \"name\": \"Feather\",\n    \"projectUrl\": \"https://feathericons.com/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/feathericons/feather/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"gi\",\n    \"name\": \"Game Icons\",\n    \"projectUrl\": \"https://game-icons.net/\",\n    \"license\": \"CC BY 3.0\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by/3.0/\"\n  },\n  {\n    \"id\": \"wi\",\n    \"name\": \"Weather Icons\",\n    \"projectUrl\": \"https://erikflowers.github.io/weather-icons/\",\n    \"license\": \"SIL OFL 1.1\",\n    \"licenseUrl\": \"http://scripts.sil.org/OFL\"\n  },\n  {\n    \"id\": \"di\",\n    \"name\": \"Devicons\",\n    \"projectUrl\": \"https://vorillaz.github.io/devicons/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"ai\",\n    \"name\": \"Ant Design Icons\",\n    \"projectUrl\": \"https://github.com/ant-design/ant-design-icons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"bs\",\n    \"name\": \"Bootstrap Icons\",\n    \"projectUrl\": \"https://github.com/twbs/icons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"ri\",\n    \"name\": \"Remix Icon\",\n    \"projectUrl\": \"https://github.com/Remix-Design/RemixIcon\",\n    \"license\": \"Apache License Version 2.0\",\n    \"licenseUrl\": \"http://www.apache.org/licenses/\"\n  },\n  {\n    \"id\": \"fc\",\n    \"name\": \"Flat Color Icons\",\n    \"projectUrl\": \"https://github.com/icons8/flat-color-icons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"gr\",\n    \"name\": \"Grommet-Icons\",\n    \"projectUrl\": \"https://github.com/grommet/grommet-icons\",\n    \"license\": \"Apache License Version 2.0\",\n    \"licenseUrl\": \"http://www.apache.org/licenses/\"\n  },\n  {\n    \"id\": \"hi\",\n    \"name\": \"Heroicons\",\n    \"projectUrl\": \"https://github.com/refactoringui/heroicons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"si\",\n    \"name\": \"Simple Icons\",\n    \"projectUrl\": \"https://simpleicons.org/\",\n    \"license\": \"CC0 1.0 Universal\",\n    \"licenseUrl\": \"https://creativecommons.org/publicdomain/zero/1.0/\"\n  },\n  {\n    \"id\": \"im\",\n    \"name\": \"IcoMoon Free\",\n    \"projectUrl\": \"https://github.com/Keyamoon/IcoMoon-Free\",\n    \"license\": \"CC BY 4.0 License\"\n  },\n  {\n    \"id\": \"bi\",\n    \"name\": \"BoxIcons\",\n    \"projectUrl\": \"https://github.com/atisawd/boxicons\",\n    \"license\": \"CC BY 4.0 License\"\n  },\n  {\n    \"id\": \"cg\",\n    \"name\": \"css.gg\",\n    \"projectUrl\": \"https://github.com/astrit/css.gg\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"vsc\",\n    \"name\": \"VS Code Icons\",\n    \"projectUrl\": \"https://github.com/microsoft/vscode-codicons\",\n    \"license\": \"CC BY 4.0\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/\"\n  }\n]","import React from 'react';\nexport var DefaultContext = {\n  color: undefined,\n  size: undefined,\n  className: undefined,\n  style: undefined,\n  attr: undefined\n};\nexport var IconContext = React.createContext && React.createContext(DefaultContext);","var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { IconContext, DefaultContext } from './iconContext';\n\nfunction Tree2Element(tree) {\n  return tree && tree.map(function (node, i) {\n    return React.createElement(node.tag, __assign({\n      key: i\n    }, node.attr), Tree2Element(node.child));\n  });\n}\n\nexport function GenIcon(data) {\n  return function (props) {\n    return React.createElement(IconBase, __assign({\n      attr: __assign({}, data.attr)\n    }, props), Tree2Element(data.child));\n  };\n}\nexport function IconBase(props) {\n  var elem = function (conf) {\n    var attr = props.attr,\n        size = props.size,\n        title = props.title,\n        svgProps = __rest(props, [\"attr\", \"size\", \"title\"]);\n\n    var computedSize = size || conf.size || \"1em\";\n    var className;\n    if (conf.className) className = conf.className;\n    if (props.className) className = (className ? className + ' ' : '') + props.className;\n    return React.createElement(\"svg\", __assign({\n      stroke: \"currentColor\",\n      fill: \"currentColor\",\n      strokeWidth: \"0\"\n    }, conf.attr, attr, svgProps, {\n      className: className,\n      style: __assign(__assign({\n        color: props.color || conf.color\n      }, conf.style), props.style),\n      height: computedSize,\n      width: computedSize,\n      xmlns: \"http://www.w3.org/2000/svg\"\n    }), title && React.createElement(\"title\", null, title), props.children);\n  };\n\n  return IconContext !== undefined ? React.createElement(IconContext.Consumer, null, function (conf) {\n    return elem(conf);\n  }) : elem(DefaultContext);\n}","'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))\n\t\t.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false ?\n\t\tstring => string.toLowerCase() :\n\t\tstring => string.toLocaleLowerCase(options.locale);\n\tconst toUpperCase = options.locale === false ?\n\t\tstring => string.toUpperCase() :\n\t\tstring => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input, toLowerCase);\n\t} else {\n\t\tinput = toLowerCase(input);\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import React from 'react';\r\nimport { BsFillInfoCircleFill } from '@react-icons/all-files/bs/BsFillInfoCircleFill';\r\nimport { BiErrorCircle } from '@react-icons/all-files/bi/BiErrorCircle';\r\n\r\nimport Row from './Row';\r\n\r\ntype AlertType = 'error' | 'info';\r\n\r\ntype AlertProps = {\r\n  type: AlertType,\r\n  children: React.ReactNode | null,\r\n};\r\n\r\ntype alertIcons = Record<AlertType, React.ReactNode>;\r\n\r\ntype alertClasses = Record<AlertType, string>;\r\n\r\nexport const InfoAlert: AlertType = 'info';\r\nexport const ErrorAlert: AlertType = 'error';\r\n\r\nconst alertIcons: alertIcons = {\r\n  [InfoAlert]: <BsFillInfoCircleFill size={18} />,\r\n  [ErrorAlert]: <BiErrorCircle size={18} />,\r\n};\r\n\r\nconst alertClasses: alertClasses = {\r\n  [InfoAlert]: 'text-blue-600 bg-blue-100',\r\n  [ErrorAlert]: 'text-red-600 bg-red-100',\r\n};\r\n\r\nconst Alert = (props: AlertProps): React.ReactElement | null => {\r\n  const { children, type } = props;\r\n\r\n  if (!children) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className={`py-3 px-4 rounded-md ${alertClasses[type]}`}>\r\n      <Row>\r\n        <div className=\"mr-3\">\r\n          {alertIcons[type]}\r\n        </div>\r\n        <div className=\"text-sm\">\r\n          {children}\r\n        </div>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import React, { SyntheticEvent, useState } from 'react';\r\n\r\nimport HyperLink from './HyperLink';\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\ntype ExpanderProps = {\r\n  items: any[],\r\n  onRender: (item: any, index: number) => React.ReactElement,\r\n  toHide?: (item: any, index: number) => boolean,\r\n  className?: string,\r\n  itemClassName?: string,\r\n  expandable?: boolean,\r\n};\r\n\r\nconst Expander = (props: ExpanderProps): React.ReactElement | null => {\r\n  const {\r\n    items,\r\n    onRender,\r\n    className = '',\r\n    itemClassName = '',\r\n    toHide = (): boolean => false,\r\n    expandable = true,\r\n  } = props;\r\n\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  if (!items || !items.length) {\r\n    return null;\r\n  }\r\n\r\n  const toggle = (event: SyntheticEvent): void => {\r\n    event.preventDefault();\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  let somethingToHide = false;\r\n\r\n  const filteredItems = items\r\n    .filter((item: any, index: number) => {\r\n      const hide = !toHide(item, index);\r\n      if (!hide) {\r\n        somethingToHide = true;\r\n      }\r\n      return expanded || hide;\r\n    })\r\n    .map((item: any, index: number) => onRender(item, index))\r\n    .map((child: React.ReactElement, index: number) => {\r\n      const itemDefaultClasses = 'flex flex-row items-center last:mr-0';\r\n      const itemClasses = `${itemDefaultClasses} ${itemClassName}`;\r\n      /* eslint-disable react/no-array-index-key */\r\n      return (\r\n        <li className={itemClasses} key={index}>\r\n          {child}\r\n        </li>\r\n      );\r\n    });\r\n\r\n  /* eslint-disable jsx-a11y/anchor-is-valid */\r\n  const moreLessButton = somethingToHide && expandable ? (\r\n    <li className=\"flex flex-row items-center mb-2\">\r\n      <HyperLink\r\n        link={{ url: '#', caption: expanded ? 'Show less' : 'Show more' }}\r\n        className=\"text-xs font-light\"\r\n        onClick={toggle}\r\n      >\r\n        {expanded ? '- less' : '+ more'}\r\n      </HyperLink>\r\n    </li>\r\n  ) : null;\r\n\r\n  const defaultClasses = 'flex flex-row flex-wrap';\r\n  const classes = `${defaultClasses} ${className}`;\r\n\r\n  return (\r\n    <ul className={classes}>\r\n      {filteredItems}\r\n      {moreLessButton}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Expander;\r\n","import React from 'react';\r\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image';\r\n\r\nimport { Image } from '../../types/Image';\r\nimport { useFluidCover } from '../../hooks/useFluidCover';\r\n\r\ntype FluidImageProps = {\r\n  image?: Image | null | undefined,\r\n  fluidImage?: IGatsbyImageData | null | undefined,\r\n  className?: string,\r\n};\r\n\r\nconst FluidImage = (props: FluidImageProps): React.ReactElement | null => {\r\n  const { image, fluidImage: fluidImageProvided, className = '' } = props;\r\n\r\n  const fluidImageFetched = useFluidCover({ imagePath: image?.srcPath });\r\n  const fluidImage = fluidImageProvided || fluidImageFetched;\r\n\r\n  if (!fluidImage) {\r\n    // @TODO: Consider to return an image placeholder.\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <GatsbyImage\r\n      image={fluidImage}\r\n      style={{ height: '100%' }}\r\n      alt={image?.caption || ''}\r\n      title={image?.caption || ''}\r\n      className={className}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FluidImage;\r\n","import React, { CSSProperties } from 'react';\r\n\r\ntype RowProps = {\r\n  children: React.ReactNode,\r\n  className?: string,\r\n  responsive?: boolean,\r\n  style?: CSSProperties,\r\n};\r\n\r\nconst Row = (props: RowProps): React.ReactElement | null => {\r\n  const {\r\n    children,\r\n    className = '',\r\n    responsive = false,\r\n    style = {},\r\n  } = props;\r\n\r\n  if (!children) {\r\n    return null;\r\n  }\r\n\r\n  const classes = responsive ? 'flex flex-col sm:flex-row items-center' : 'flex flex-row items-center';\r\n\r\n  return (\r\n    <div style={style} className={`${classes} ${className}`}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import React from 'react';\r\n\r\nimport type { Tag as TagType } from '../../types/Tag';\r\n\r\ntype TagProps = {\r\n  tag: TagType,\r\n};\r\n\r\nconst Tag = (props: TagProps): React.ReactElement => {\r\n  const { tag } = props;\r\n\r\n  return (\r\n    <span\r\n      key={tag.name}\r\n      className=\"inline-block bg-gray-200 rounded-sm px-2 py-1 text-xs font-normal last:mr-0\"\r\n    >\r\n      {tag.name}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default Tag;\r\n","import React from 'react';\r\n\r\nimport type { Tag as TagType } from '../../types/Tag';\r\nimport Tag from './Tag';\r\nimport Expander from './Expander';\r\n\r\ntype TagsProps = {\r\n  tags: TagType[],\r\n  className?: string,\r\n  numToShow?: number,\r\n};\r\n\r\nconst Tags = (props: TagsProps): React.ReactElement | null => {\r\n  const { tags, className = '', numToShow = Infinity } = props;\r\n\r\n  if (!tags) {\r\n    return null;\r\n  }\r\n\r\n  const defaultClasses = '';\r\n  const classes = `${defaultClasses} ${className}`;\r\n\r\n  const onRender = (tag: TagType): React.ReactElement => {\r\n    return (\r\n      <Tag key={tag.name} tag={tag} />\r\n    );\r\n  };\r\n\r\n  const toHide = (tag: TagType, index: number): boolean => {\r\n    return index >= numToShow;\r\n  };\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <Expander\r\n        items={tags}\r\n        toHide={toHide}\r\n        onRender={onRender}\r\n        itemClassName=\"mr-2 mb-2\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tags;\r\n","import { graphql, useStaticQuery } from 'gatsby';\r\nimport { UseImagesQuery, UseImagesQuery_allFile_nodes } from './__generated__/UseImagesQuery';\r\n\r\nexport const useFluidCovers = (): UseImagesQuery_allFile_nodes[] => {\r\n  // @see: https://www.gatsbyjs.com/plugins/gatsby-plugin-image/\r\n  const images: UseImagesQuery = useStaticQuery(graphql`\r\n    query UseImagesQuery {\r\n      allFile(\r\n        filter: {sourceInstanceName: {eq: \"images\"}}\r\n      ) {\r\n        nodes {\r\n          base\r\n          name\r\n          relativePath\r\n          childImageSharp {\r\n            gatsbyImageData(\r\n              layout: FULL_WIDTH,\r\n              quality: 95,\r\n              transformOptions: {\r\n                fit: COVER,\r\n                cropFocus: CENTER,\r\n                grayscale: false,\r\n              },\r\n            )\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n  return images.allFile.nodes;\r\n};\r\n","import { IGatsbyImageData } from 'gatsby-plugin-image';\r\nimport { useFluidCovers } from './useFluidCovers';\r\nimport {\r\n  UseImagesQuery_allFile_nodes,\r\n} from './__generated__/UseImagesQuery';\r\n\r\ntype UseFluidCoverProps = {\r\n  imagePath?: string | null | undefined,\r\n};\r\n\r\nexport const useFluidCover = (\r\n  props: UseFluidCoverProps,\r\n): IGatsbyImageData | undefined | null => {\r\n  const { imagePath } = props;\r\n  const allImages: UseImagesQuery_allFile_nodes[] = useFluidCovers();\r\n\r\n  if (!imagePath) {\r\n    return undefined;\r\n  }\r\n\r\n  const foundNode: UseImagesQuery_allFile_nodes | undefined = allImages.find(\r\n    (node: UseImagesQuery_allFile_nodes) => {\r\n      return node.relativePath === imagePath;\r\n    },\r\n  );\r\n\r\n  if (!foundNode) {\r\n    return undefined;\r\n  }\r\n\r\n  return foundNode?.childImageSharp?.gatsbyImageData;\r\n};\r\n"],"names":["GenIcon","module","exports","props","DefaultContext","color","undefined","size","className","style","attr","IconContext","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","Tree2Element","tree","map","node","tag","key","child","data","IconBase","elem","conf","title","svgProps","computedSize","stroke","fill","strokeWidth","height","width","xmlns","children","Consumer","UPPERCASE","LOWERCASE","LEADING_CAPITAL","IDENTIFIER","SEPARATORS","LEADING_SEPARATORS","RegExp","source","SEPARATORS_AND_IDENTIFIER","NUMBERS_AND_IDENTIFIER","camelCase","input","options","Array","isArray","TypeError","pascalCase","preserveConsecutiveUppercase","x","trim","filter","join","toLowerCase","locale","string","toLocaleLowerCase","toUpperCase","toLocaleUpperCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","slice","preserveCamelCase","replace","lastIndex","m1","charAt","_","identifier","m","postProcess","W","hasNativeLazyLoadSupport","HTMLImageElement","z","a","P","h","loading","shouldLoad","opacity","A","r","o","l","backgroundColor","position","top","left","bottom","right","objectFit","objectPosition","d","transition","H","F","_ref5","layout","paddingTop","maxWidth","display","alt","role","src","G","u","V","B","U","srcSet","decoding","Y","fallback","sources","sizes","_ref6","media","type","X","propTypes","isRequired","displayName","J","Z","Error","K","Q","ee","te","ae","_len","_key","c","concat","ie","image","se","re","ne","Set","oe","le","de","as","class","g","onStartLoad","onLoad","onError","f","w","y","b","v","E","k","S","M","N","$","JSON","stringify","images","I","then","_ref7","renderImageToString","swapPlaceholderImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","add","has","_ref8","innerHTML","isLoading","isLoaded","requestAnimationFrame","cancelAnimationFrame","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ce","he","ue","__imageData","__error","console","warn","ge","imgClassName","imgStyle","placeholder","pe","_len2","_key2","me","fe","we","InfoAlert","ErrorAlert","alertIcons","React","BsFillInfoCircleFill","BiErrorCircle","alertClasses","Row","items","onRender","itemClassName","toHide","expandable","expanded","setExpanded","useState","somethingToHide","filteredItems","item","index","hide","itemClasses","moreLessButton","HyperLink","link","url","caption","onClick","event","preventDefault","classes","fluidImage","fluidImageProvided","fluidImageFetched","useFluidCover","imagePath","srcPath","GatsbyImage","responsive","name","tags","numToShow","Infinity","Expander","Tag","_foundNode$childImage","allImages","useStaticQuery","allFile","nodes","foundNode","find","relativePath","childImageSharp","gatsbyImageData"],"sourceRoot":""}